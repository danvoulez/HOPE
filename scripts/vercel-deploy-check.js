#!/usr/bin/env node

/**
 * Script de verifica√ß√£o pr√©-deploy para Vercel
 * 
 * Este script verifica se a configura√ß√£o do projeto est√° correta para deploy no Vercel,
 * identificando problemas comuns antes de tentar fazer o deploy.
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');
const chalk = require('chalk');

// Diret√≥rios e arquivos importantes
const ROOT_DIR = path.resolve(__dirname, '..');
const FRONTEND_DIR = path.join(ROOT_DIR, 'frontend');
const VERCEL_CONFIG = path.join(ROOT_DIR, 'vercel.json');
const FRONTEND_VERCEL_CONFIG = path.join(FRONTEND_DIR, 'vercel.json');
const PACKAGE_JSON = path.join(FRONTEND_DIR, 'package.json');
const BUILD_SCRIPT = path.join(ROOT_DIR, 'scripts', 'build.js');
const ENV_FILE = path.join(FRONTEND_DIR, '.env');
const ENV_EXAMPLE_FILE = path.join(FRONTEND_DIR, '.env.example');

// Contadores para o relat√≥rio
let passCount = 0;
let warnCount = 0;
let errorCount = 0;

console.log(chalk.blue.bold('üöÄ Iniciando verifica√ß√£o pr√©-deploy para Vercel\n'));

// Fun√ß√£o para verificar se um arquivo existe
function checkFileExists(filePath, required = true, suggestion = '') {
  const relativePath = path.relative(ROOT_DIR, filePath);
  
  if (fs.existsSync(filePath)) {
    console.log(chalk.green(`‚úì ${relativePath} encontrado`));
    passCount++;
    return true;
  } else {
    if (required) {
      console.log(chalk.red(`‚úó ${relativePath} n√£o encontrado (OBRIGAT√ìRIO)`));
      if (suggestion) console.log(chalk.yellow(`  Sugest√£o: ${suggestion}`));
      errorCount++;
    } else {
      console.log(chalk.yellow(`‚ö† ${relativePath} n√£o encontrado (opcional)`));
      if (suggestion) console.log(chalk.yellow(`  Sugest√£o: ${suggestion}`));
      warnCount++;
    }
    return false;
  }
}

// Verificar arquivos de configura√ß√£o do Vercel
console.log(chalk.blue.bold('\nüìÅ Verificando arquivos de configura√ß√£o:'));

const hasVercelConfig = checkFileExists(
  VERCEL_CONFIG, 
  true, 
  'Crie um arquivo vercel.json na raiz do projeto'
);

checkFileExists(
  FRONTEND_VERCEL_CONFIG, 
  false, 
  'Considere ter um vercel.json espec√≠fico para o frontend'
);

// Verificar package.json e scripts
console.log(chalk.blue.bold('\nüì¶ Verificando package.json e scripts:'));

const hasPackageJson = checkFileExists(
  PACKAGE_JSON, 
  true, 
  'Crie um package.json no diret√≥rio frontend'
);

// Verificar conte√∫do do package.json
if (hasPackageJson) {
  try {
    const packageJson = JSON.parse(fs.readFileSync(PACKAGE_JSON, 'utf8'));
    
    // Verificar scripts necess√°rios
    if (packageJson.scripts && packageJson.scripts.build) {
      console.log(chalk.green('‚úì Script de build encontrado em package.json'));
      passCount++;
    } else {
      console.log(chalk.red('‚úó Script de build n√£o encontrado em package.json'));
      console.log(chalk.yellow('  Sugest√£o: Adicione "build": "react-scripts build" aos scripts'));
      errorCount++;
    }
    
    // Verificar depend√™ncias
    const requiredDeps = ['react', 'react-dom'];
    const missingDeps = requiredDeps.filter(
      dep => !(packageJson.dependencies && packageJson.dependencies[dep])
    );
    
    if (missingDeps.length === 0) {
      console.log(chalk.green('‚úì Todas as depend√™ncias essenciais encontradas'));
      passCount++;
    } else {
      console.log(chalk.red(`‚úó Depend√™ncias essenciais faltando: ${missingDeps.join(', ')}`));
      console.log(chalk.yellow('  Sugest√£o: Instale as depend√™ncias com npm install'));
      errorCount++;
    }
  } catch (error) {
    console.log(chalk.red(`‚úó Erro ao analisar package.json: ${error.message}`));
    errorCount++;
  }
}

// Verificar configura√ß√£o do Vercel
console.log(chalk.blue.bold('\n‚öôÔ∏è Verificando configura√ß√£o do Vercel:'));

if (hasVercelConfig) {
  try {
    const vercelConfig = JSON.parse(fs.readFileSync(VERCEL_CONFIG, 'utf8'));
    
    // Verificar configura√ß√£o de build
    if (vercelConfig.buildCommand) {
      console.log(chalk.green(`‚úì Comando de build configurado: ${vercelConfig.buildCommand}`));
      passCount++;
    } else {
      console.log(chalk.yellow('‚ö† Comando de build n√£o configurado em vercel.json'));
      console.log(chalk.yellow('  Sugest√£o: Adicione "buildCommand": "cd frontend && npm run build"'));
      warnCount++;
    }
    
    // Verificar diret√≥rio de sa√≠da
    if (vercelConfig.outputDirectory) {
      console.log(chalk.green(`‚úì Diret√≥rio de sa√≠da configurado: ${vercelConfig.outputDirectory}`));
      passCount++;
    } else {
      console.log(chalk.yellow('‚ö† Diret√≥rio de sa√≠da n√£o configurado em vercel.json'));
      console.log(chalk.yellow('  Sugest√£o: Adicione "outputDirectory": "frontend/build"'));
      warnCount++;
    }
    
    // Verificar configura√ß√£o de rotas
    if (vercelConfig.rewrites && vercelConfig.rewrites.length > 0) {
      console.log(chalk.green('‚úì Configura√ß√£o de rotas (rewrites) encontrada'));
      
      // Verificar se h√° rota para a API
      const hasApiRoute = vercelConfig.rewrites.some(
        route => route.source && route.source.includes('/api/')
      );
      
      if (hasApiRoute) {
        console.log(chalk.green('‚úì Rota para API configurada'));
        passCount++;
      } else {
        console.log(chalk.yellow('‚ö† Nenhuma rota para API configurada'));
        console.log(chalk.yellow('  Sugest√£o: Adicione uma rota para redirecionar chamadas de API'));
        warnCount++;
      }
    } else {
      console.log(chalk.yellow('‚ö† Configura√ß√£o de rotas (rewrites) n√£o encontrada'));
      console.log(chalk.yellow('  Sugest√£o: Configure rewrites para SPA e API'));
      warnCount++;
    }
  } catch (error) {
    console.log(chalk.red(`‚úó Erro ao analisar vercel.json: ${error.message}`));
    errorCount++;
  }
}

// Verificar vari√°veis de ambiente
console.log(chalk.blue.bold('\nüîê Verificando vari√°veis de ambiente:'));

const hasEnvFile = checkFileExists(
  ENV_FILE, 
  false, 
  'Crie um arquivo .env com as vari√°veis necess√°rias'
);

checkFileExists(
  ENV_EXAMPLE_FILE, 
  false, 
  'Crie um arquivo .env.example com exemplos das vari√°veis necess√°rias'
);

if (hasEnvFile) {
  try {
    const envContent = fs.readFileSync(ENV_FILE, 'utf8');
    
    // Verificar vari√°veis essenciais
    if (envContent.includes('REACT_APP_API_URL')) {
      console.log(chalk.green('‚úì Vari√°vel REACT_APP_API_URL encontrada'));
      passCount++;
    } else {
      console.log(chalk.yellow('‚ö† Vari√°vel REACT_APP_API_URL n√£o encontrada'));
      console.log(chalk.yellow('  Sugest√£o: Adicione REACT_APP_API_URL ao arquivo .env'));
      warnCount++;
    }
  } catch (error) {
    console.log(chalk.red(`‚úó Erro ao ler arquivo .env: ${error.message}`));
    errorCount++;
  }
}

// Verificar se o build funciona localmente
console.log(chalk.blue.bold('\nüõ†Ô∏è Testando build local:'));

try {
  console.log('Executando build de teste (pode demorar um pouco)...');
  execSync('cd ' + FRONTEND_DIR + ' && npm run build --if-present', { stdio: 'pipe' });
  console.log(chalk.green('‚úì Build local executado com sucesso'));
  
  // Verificar se o diret√≥rio build foi criado
  const buildDir = path.join(FRONTEND_DIR, 'build');
  if (fs.existsSync(buildDir)) {
    console.log(chalk.green('‚úì Diret√≥rio build criado com sucesso'));
    passCount++;
  } else {
    console.log(chalk.red('‚úó Diret√≥rio build n√£o foi criado'));
    errorCount++;
  }
} catch (error) {
  console.log(chalk.red(`‚úó Erro ao executar build local: ${error.message}`));
  console.log(chalk.yellow('  Verifique os erros acima e corrija os problemas no c√≥digo'));
  errorCount++;
}

// Resumo final
console.log(chalk.blue.bold('\nüìä Resumo da verifica√ß√£o:'));
console.log(chalk.green(`‚úì ${passCount} verifica√ß√µes passaram`));
console.log(chalk.yellow(`‚ö† ${warnCount} avisos (podem n√£o impedir o deploy)`));
console.log(chalk.red(`‚úó ${errorCount} erros (podem impedir o deploy)`));

if (errorCount > 0) {
  console.log(chalk.red.bold('\n‚ùå Seu projeto tem problemas que podem impedir o deploy no Vercel.'));
  console.log(chalk.red('   Corrija os erros acima antes de tentar fazer o deploy.'));
  process.exit(1);
} else if (warnCount > 0) {
  console.log(chalk.yellow.bold('\n‚ö†Ô∏è Seu projeto tem alguns avisos, mas provavelmente pode ser implantado.'));
  console.log(chalk.yellow('   Considere corrigir os avisos para uma experi√™ncia melhor.'));
  process.exit(0);
} else {
  console.log(chalk.green.bold('\n‚úÖ Seu projeto est√° pronto para ser implantado no Vercel!'));
  console.log(chalk.green('   Execute "vercel" ou fa√ßa push para o GitHub para iniciar o deploy.'));
  process.exit(0);
}
